#!/bin/bash
set -e
SCRIPT_DIR=$( cd $(dirname $0) ; pwd -P )
XCODE_ROOT=`xcode-select -print-path`
IPHONE_SDKVERSION=`xcodebuild -showsdks | grep iphoneos | egrep "[[:digit:]]+\.[[:digit:]]+" -o | tail -1`
ARM_DEV_CMD="xcrun --sdk iphoneos"
SIM_DEV_CMD="xcrun --sdk iphonesimulator"
EXTRA_FLAGS="-miphoneos-version-min=6.0"

configure_exports() {
    if [[ $1 = arm* ]]; then
        DEV_CMD=$ARM_DEV_CMD
    else
        DEV_CMD=$SIM_DEV_CMD
    fi
    if [[ $1 = armv7* ]]; then
        NEON_FLAGS=" -D__NEON__ -mfpu=neon"
    else
        NEON_FLAGS=""
    fi
    export CXX="$DEV_CMD clang++ -arch $1 $EXTRA_FLAGS $NEON_FLAGS"
    export CC="$DEV_CMD clang -arch $1 $EXTRA_FLAGS $NEON_FLAGS"

    XCMAKE=`$DEV_CMD --find make`
    XCPATH=`dirname $XCMAKE`
    export PATH="$XCPATH:$PATH"
    XCRANLIB=`$DEV_CMD --find ranlib`
    XCPATH=`dirname $XCRANLIB`
    export PATH="$XCPATH:$PATH"
}


generate_arch() {
    configure_exports $1
    rm -rf $SCRIPT_DIR/build
    mkdir -p $SCRIPT_DIR/build
    cd $SCRIPT_DIR/build
    cmake .. -DCMAKE_INSTALL_PREFIX="$SCRIPT_DIR/installed/"
    make install
    cd $SCRIPT_DIR
    
    mkdir -p $SCRIPT_DIR/framework/lua
    mkdir -p $SCRIPT_DIR/framework/lib/$1
    mkdir -p $SCRIPT_DIR/framework/include

    # copy includes
    cp -r $SCRIPT_DIR/installed/include/torch/* $SCRIPT_DIR/framework/include
    rm -rf $SCRIPT_DIR/installed/
    
    # copy libs
    cp $SCRIPT_DIR/build/exe/lua/libtorch-lua-static.a       $SCRIPT_DIR/framework/lib/$1/
    cp $SCRIPT_DIR/build/lib/luaT/libluaT.a                  $SCRIPT_DIR/framework/lib/$1
    cp $SCRIPT_DIR/build/lib/TH/libTH.a                      $SCRIPT_DIR/framework/lib/$1
    cp $SCRIPT_DIR/build/pkg/torch/libtorch.a                $SCRIPT_DIR/framework/lib/$1
    
    cp $SCRIPT_DIR/build/3rdparty/nn/libnn.a                 $SCRIPT_DIR/framework/lib/$1
    cp $SCRIPT_DIR/build/3rdparty/image/libimage.a           $SCRIPT_DIR/framework/lib/$1
    cp $SCRIPT_DIR/build/3rdparty/nnx/libnnx.a               $SCRIPT_DIR/framework/lib/$1
    cp $SCRIPT_DIR/build/3rdparty/cjson/libcjson.a           $SCRIPT_DIR/framework/lib/$1
    
    # copy lua scripts
    mkdir -p $SCRIPT_DIR/framework/lua/torch
    cp -r $SCRIPT_DIR/pkg/torch/*.lua $SCRIPT_DIR/framework/lua/torch/

    mkdir -p $SCRIPT_DIR/framework/lua/dok
    cp -r $SCRIPT_DIR/pkg/dok/*.lua $SCRIPT_DIR/framework/lua/dok/
    
    mkdir -p $SCRIPT_DIR/framework/lua/nn
    cp -r $SCRIPT_DIR/3rdparty/nn/*.lua $SCRIPT_DIR/framework/lua/nn/
    
    mkdir -p $SCRIPT_DIR/framework/lua/nnx
    cp -r $SCRIPT_DIR/3rdparty/nnx/*.lua $SCRIPT_DIR/framework/lua/nnx/
    
    mkdir -p $SCRIPT_DIR/framework/lua/image
    cp -r $SCRIPT_DIR/3rdparty/image/*.lua $SCRIPT_DIR/framework/lua/image/
    
    
}

lipo_libs() {
    $ARM_DEV_CMD lipo -create \
	$SCRIPT_DIR/framework/lib/armv7/$1  \
	$SCRIPT_DIR/framework/lib/armv7s/$1 \
	$SCRIPT_DIR/framework/lib/arm64/$1  \
	$SCRIPT_DIR/framework/lib/i386/$1   \
	$SCRIPT_DIR/framework/lib/x86_64/$1 \
	-output $SCRIPT_DIR/framework/lib/$1
}

rm -rf $SCRIPT_DIR/framework/lua
rm -rf $SCRIPT_DIR/framework/lib
rm -rf $SCRIPT_DIR/framework/include

echo "generating torch"
generate_arch armv7
generate_arch armv7s
generate_arch arm64
generate_arch i386
generate_arch x86_64

echo "LIPOing libraries"
# lipo the libraries
lipo_libs libtorch-lua-static.a
lipo_libs libluaT.a
lipo_libs libTH.a
lipo_libs libtorch.a
lipo_libs libnn.a
lipo_libs libimage.a
lipo_libs libnnx.a
lipo_libs libcjson.a

echo "cleaning up"
rm -rf $SCRIPT_DIR/framework/lib/arm*
rm -rf $SCRIPT_DIR/framework/lib/i386
rm -rf $SCRIPT_DIR/framework/lib/x86_64

echo "==> exported complete framework in framework/"
echo "    just drag the whole dir into your iOS project"
