require 'torch'

local mytester 
local labtest = {}
local msize = 100

local function maxdiff(x,y)
   local d = x-y
   if x:type() == 'torch.DoubleTensor' or x:type() == 'torch.FloatTensor' then
      return d:abs():max()
   else
      local dd = torch.Tensor():resize(d:size()):copy(d)
      return dd:abs():max()
   end
end

function labtest.max()
   local x = lab.rand(msize,msize)
   local mx,ix = lab.max(x)
   local mxx = torch.Tensor()
   local ixx = torch.LongTensor()
   lab.max(mxx,ixx,x)
   mytester:asserteq(maxdiff(mx,mxx),0,'lab.max value')
   mytester:asserteq(maxdiff(ix,ixx),0,'lab.max index')
end
function labtest.min()
   local x = lab.rand(msize,msize)
   local mx,ix = lab.min(x)
   local mxx = torch.Tensor()
   local ixx = torch.LongTensor()
   lab.min(mxx,ixx,x)
   mytester:asserteq(maxdiff(mx,mxx),0,'lab.min value')
   mytester:asserteq(maxdiff(ix,ixx),0,'lab.min index')
end
function labtest.sum()
   local x = lab.rand(msize,msize)
   local mx = lab.sum(x)
   local mxx = torch.Tensor()
   lab.sum(mxx,x)
   mytester:asserteq(maxdiff(mx,mxx),0,'lab.sum value')
end
function labtest.prod()
   local x = lab.rand(msize,msize)
   local mx = lab.prod(x)
   local mxx = torch.Tensor()
   lab.prod(mxx,x)
   mytester:asserteq(maxdiff(mx,mxx),0,'lab.prod value')
end
function labtest.cumsum()
   local x = lab.rand(msize,msize)
   local mx = lab.cumsum(x)
   local mxx = torch.Tensor()
   lab.cumsum(mxx,x)
   mytester:asserteq(maxdiff(mx,mxx),0,'lab.cumsum value')
end
function labtest.cumprod()
   local x = lab.rand(msize,msize)
   local mx = lab.cumprod(x)
   local mxx = torch.Tensor()
   lab.cumprod(mxx,x)
   mytester:asserteq(maxdiff(mx,mxx),0,'lab.cumprod value')
end
function labtest.cross()
   local x = lab.rand(msize,3,msize)
   local y = lab.rand(msize,3,msize)
   local mx = lab.cross(x,y)
   local mxx = torch.Tensor()
   lab.cross(mxx,x,y)
   mytester:asserteq(maxdiff(mx,mxx),0,'lab.cross value')
end
function labtest.zeros()
   local mx = lab.zeros(msize,msize)
   local mxx = torch.Tensor()
   lab.zeros(mxx,msize,msize)
   mytester:asserteq(maxdiff(mx,mxx),0,'lab.zeros value')
end
function labtest.ones()
   local mx = lab.ones(msize,msize)
   local mxx = torch.Tensor()
   lab.ones(mxx,msize,msize)
   mytester:asserteq(maxdiff(mx,mxx),0,'lab.ones value')
end
function labtest.diag()
   local x = lab.rand(msize,msize)
   local mx = lab.diag(x)
   local mxx = torch.Tensor()
   lab.diag(mxx,x)
   mytester:asserteq(maxdiff(mx,mxx),0,'lab.diag value')
end
function labtest.eye()
   local mx = lab.eye(msize,msize)
   local mxx = torch.Tensor()
   lab.eye(mxx,msize,msize)
   mytester:asserteq(maxdiff(mx,mxx),0,'lab.eye value')
end
function labtest.range()
   local mx = lab.range(0,1)
   local mxx = torch.Tensor()
   lab.range(mxx,0,1)
   mytester:asserteq(maxdiff(mx,mxx),0,'lab.range value')
end
function labtest.randperm()
   local t=os.time()
   lab.manualSeed(t)
   local mx = lab.randperm(msize)
   local mxx = torch.Tensor()
   lab.manualSeed(t)
   lab.randperm(mxx,msize)
   mytester:asserteq(maxdiff(mx,mxx),0,'lab.randperm value')
end
function labtest.reshape()
   local x = lab.rand(10,13,23)
   local mx = lab.reshape(x,130,23)
   local mxx = torch.Tensor()
   lab.reshape(mxx,x,130,23)
   mytester:asserteq(maxdiff(mx,mxx),0,'lab.reshape value')
end
function labtest.sort()
   local x = lab.rand(msize,msize)
   local mx,ix = lab.sort(x)
   local mxx = torch.Tensor()
   local ixx = torch.LongTensor()
   lab.sort(mxx,ixx,x)
   mytester:asserteq(maxdiff(mx,mxx),0,'lab.sort value')
   mytester:asserteq(maxdiff(ix,ixx),0,'lab.sort index')
end
function labtest.tril()
   local x = lab.rand(msize,msize)
   local mx = lab.tril(x)
   local mxx = torch.Tensor()
   lab.tril(mxx,x)
   mytester:asserteq(maxdiff(mx,mxx),0,'lab.tril value')
end
function labtest.triu()
   local x = lab.rand(msize,msize)
   local mx = lab.triu(x)
   local mxx = torch.Tensor()
   lab.triu(mxx,x)
   mytester:asserteq(maxdiff(mx,mxx),0,'lab.tril value')
end
function labtest.cat()
   local x = lab.rand(13,msize,msize)
   local y = lab.rand(17,msize,msize)
   local mx = lab.cat(x,y)
   local mxx = torch.Tensor()
   lab.cat(mxx,x,y)
   mytester:asserteq(maxdiff(mx,mxx),0,'lab.cat value')
end
function labtest.sin()
   local x = lab.rand(msize,msize,msize)
   local mx = lab.sin(x)
   local mxx  = torch.Tensor()
   lab.sin(mxx,x)
   mytester:asserteq(maxdiff(mx,mxx),0,'lab.sin value')
end
function labtest.linspace()
   local from = math.random()
   local to = from+math.random()
   local mx = lab.linspace(from,to,137)
   local mxx = torch.Tensor()
   lab.linspace(mxx,from,to,137)
   mytester:asserteq(maxdiff(mx,mxx),0,'lab.linspace value')
end
function labtest.logspace()
   local from = math.random()
   local to = from+math.random()
   local mx = lab.logspace(from,to,137)
   local mxx = torch.Tensor()
   lab.logspace(mxx,from,to,137)
   mytester:asserteq(maxdiff(mx,mxx),0,'lab.logspace value')
end
function labtest.rand()
   lab.manualSeed(123456)
   local mx = lab.rand(msize,msize)
   local mxx = torch.Tensor()
   lab.manualSeed(123456)
   lab.rand(mxx,msize,msize)
   mytester:asserteq(maxdiff(mx,mxx),0,'lab.rand value')
end
function labtest.randn()
   lab.manualSeed(123456)
   local mx = lab.randn(msize,msize)
   local mxx = torch.Tensor()
   lab.manualSeed(123456)
   lab.randn(mxx,msize,msize)
   mytester:asserteq(maxdiff(mx,mxx),0,'lab.randn value')
end
function labtest.gesv()
   local a=torch.Tensor({6.80, -2.11,  5.66,  5.97,  8.23,-6.05, -3.30,  5.36, -4.44,  1.08,-0.45,  2.58, -2.70,  0.27,  9.04,8.32,  2.71,  4.35, -7.17,  2.14,-9.67, -5.14, -7.26,  6.08, -6.87})
   local b=torch.Tensor({4.02,  6.19, -8.22, -7.57, -3.03,-1.56,  4.00, -8.67,  1.75,  2.86,9.81, -4.09, -4.57, -8.61,  8.99})
   a = a:unfold(1,5,5)
   b = b:unfold(1,5,5)
   local mx = lab.gesv(a,b)
   local ta = torch.Tensor()
   local tb = torch.Tensor()
   local mxx = lab.gesv(ta,tb,a,b)
   local mxxx = lab.gesv(a,b,false)
   mytester:asserteq(maxdiff(mx,tb),0,'lab.gesv value temp')
   mytester:asserteq(maxdiff(mx,b),0,'lab.gesv value flag')
   mytester:asserteq(maxdiff(mx,mxx),0,'lab.gesv value out1')
   mytester:asserteq(maxdiff(mx,mxxx),0,'lab.gesv value out2')
end

function lab.test()
   math.randomseed(os.time())
   mytester = torch.Tester()   
   mytester:add(labtest)
   mytester:run()
end
