====== Random Number Package ======
{{anchor:random.dok}}

This package provides accurate mathematical random generation, based on
[[http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html|Mersenne Twister]]
random number generator.

======  Seed Handling ======
{{anchor::random.seed.dok}}

If no seed is provided to the random generator (using
[[#RandomSeed|seed()]] or [[#RandomManualSeed|manualSeed()]]), a
random seed will be set according to [[#RandomSeed|seed()]] the first
time a random number is generated.

Initial seed can be obtained using [[#RandomInitialSeed|initialSeed()]].

Setting a particular seed allows the user to (re)-generate a particular serie of
random numbers. Example:
<file>
> random.manualSeed(123)
> = random.uniform()
0.69646918727085
> return  random.uniform()
0.71295532141812
> return  random.uniform()
0.28613933874294
> random.manualSeed(123)
> return  random.uniform()
0.69646918727085
> return  random.uniform()
0.71295532141812
> return  random.uniform()
0.28613933874294
> random.manualSeed(random.initialSeed())
> return  random.uniform()
0.69646918727085
> return  random.uniform()
0.71295532141812
> return  random.uniform()
0.28613933874294
</file>

=====  [number] seed() =====
{{anchor:random.seed}}

Set the seed of the random number generator according to the time of the
computer. Granularity is seconds. Returns the seed obtained.

=====  manualSeed(number) =====
{{anchor:random.manualSeed}}

Set the seed of the random number generator to the given ''number''.

=====  initialSeed() =====
{{anchor:random.initialSeed}}

Returns the initial seed used to initialize the random generator.

======  [number] random() ======
{{anchor:random.random}}

Returns a 32 bit integer random number.

======  [number] uniform([a],[b]) ======
{{anchor:random.uniform}}

Returns a random real number according to uniform distribution on [a,b[. By default ''a'' is 0 and ''b'' is 1.

======  [number] normal([mean],[stdv]) ======
{{anchor:random.normal}}

Returns a random real number according to a normal distribution with the given ''mean'' and standard deviation ''stdv''.
''stdv'' must be positive.

======  [number] exponential(lambda) ======
{{anchor:random.exponential}}

Returns a random real number according to the exponential distribution
''p(x) = lambda * exp(-lambda * x)''

======  [number] cauchy(median, sigma) ======
{{anchor:random.cauchy}}

Returns a random real number according to the Cauchy distribution
''p(x) = sigma/(pi*(sigma^2 + (x-median)^2))''

======  [number] logNormal(mean, stdv) ======
{{anchor:random.logNormal}}

Returns a random real number according to the log-normal distribution, with
the given ''mean'' and standard deviation ''stdv''.
''stdv'' must be positive.

======  [number] geometric(p) ======
{{anchor:random.geometric}}

Returns a random integer number according to a geometric distribution
''p(i) = (1-p) * p^(i-1)''. ''p'' must satisfy ''0 < p < 1''.

======  [number] bernouilli([p]) ======
{{anchor:random.bernoulli}}

Returns ''1'' with probability ''p'' and ''0'' with probability ''1-p''. ''p'' must satisfy ''0 < p < 1''.
By default ''p'' is equal to ''0.5''.
