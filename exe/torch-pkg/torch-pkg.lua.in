-- some paths
tmp = '/tmp/torch-pkg'

-- some dependencies
require 'paths'
require 'torch'

-- torch cmake config
cmake_conf = {
   CMAKE_INSTALL_PREFIX = paths.install_prefix
}

-- some commands
mkdir = 'mkdir -p '
rm = 'rm -rf '
cd = 'cd '
cmake = 'CMAKE_PREFIX_PATH=' .. paths.install_prefix .. ' cmake .. '
for var,val in pairs(cmake_conf) do
   cmake = cmake .. '-D' .. var .. '=' .. val .. ' '
end
cmake = cmake .. '; '
make = mkdir .. 'build; ' .. cd .. 'build; ' .. cmake .. 'make'
install = 'make install'

-- shortcuts
append = table.insert
error = function(msg) print('ERROR: ' .. msg) end
info = function(msg) print('--> ' .. msg) end
infoarg = function(msg) print('    ' .. msg) end

-- some binaries
wget = '@WGET_EXECUTABLE@' if wget == '' then wget = nil end
curl = '@CURL_EXECUTABLE@' if curl == '' then curl = nil end
git = '@GIT_EXECUTABLE@'   if git  == '' then git  = nil end
if not wget and not curl or not git then
   error('torch-pkg cannot run without git and one of wget | curl')
   os.exit()
end

-- config
configfile = paths.concat(os.getenv('HOME'), '.torchpkg', 'config')
if not paths.filep(configfile) then
   defurls = {
      'https://github.com/clementfarabet/lua---',
      'https://github.com/clementfarabet/',
      'https://github.com/andresy/',
      'https://github.com/koraykv/',
      'https://github.com/marcoscoffier/lua---',
      'https://github.com/marcoscoffier/'
   }
   os.execute(mkdir .. paths.dirname(configfile))
   os.execute('echo "config = {urls={}}" > ' .. configfile)
   for _,url in ipairs(defurls) do
      os.execute('echo "table.insert(config.urls, \'' .. url .. '\')" >> ' .. configfile)
   end
end
dofile(configfile)

-- help/args
help = 
[=[Torch7 Package Manager

Usage: torch-pkg [options] <command> [argument]

Supported Commands:
  help            print this help
  install         install a package (download + build + deploy)
  download        download a package locally
  build           build a local package
  deploy          deploy a package (build it if necessary)
  show            show information about a package
  list            list available packages
  search          search for a package
  add             add a server address to local config ($HOME/.torchpkg/config)

Arguments for install|download:
  <pkg-name>      a package name (to be found in one of the configured repos)
  <pkg-repo>      the full address of a GIT repository
  <pkg-url>       the URL of a simple package (should be a tar/tgz/tbz)

Arguments for add:
  <base-url>      a base URL where GIT repos or tars can be found

Options:
  -v|-verbose     be more verbose
  -d|-dry         dry run ]=]

-- no args?
if #arg == 0 then
   print(help)
   os.exit()
end

-- commands
commands = {'help','install','download','build','deploy','show',
            'list','search','add'}

-- parse arguments
options = {}
arguments = {}
for i,arg in ipairs(arg) do
   if commandi then
      append(arguments, arg)
   end
   for _,cmd in ipairs(commands) do
      if arg == cmd then
         command = arg
         commandi = i
         break
      end 
   end
end
for i = 1,#arg do
   append(options, arg[i])
end

-- no command?
if not command then
   error('invalid command')
   print(help)
   os.exit()
end

-- parse basic options
for i,opt in ipairs(options) do
   if opt == '-v' or opt == '-verbose' then
      verbose = true
   end
   if opt == '-d' or opt == '-dry' then
      dry = true
   end
end

-- exec command
if dry then
   exec = print
else
   if verbose then
      exec = function(cmd) info('executing: ' .. cmd) os.execute(cmd) end
   else
      exec = os.execute
   end
end

-- now execute command
if command == 'help' then

   print(help)
   os.exit()

elseif command == 'install' then

   if not arguments[1] then
      print(help)
      print()
      error('please provide a package name or a path to a tar/tgz')
      os.exit()
   end

   package = arguments[1]

   if package:find('%.tar$') or package:find('%.tgz$') or package:find('%.tar.gz$') then
      error('only supporting git repos for now')
      os.exit()
   end

   exec(mkdir .. tmp)
   exec(rm .. paths.concat(tmp,package))

   for _,url in ipairs(config.urls) do
      info('trying to fetch package from server: ' .. url)
      exec(git .. ' clone ' .. url .. package .. ' ' .. paths.concat(tmp,package))
      if paths.dirp(paths.concat(tmp,package)) then
         found = paths.concat(tmp,package)
         info('just found it!')
         break
      end
   end

   if not found then
      error('could not find package ' .. package .. ' in any of the registered repos')
      os.exit()
   end

   info('building & deploying')
   exec(cd .. found .. '; ' .. make .. '; ' .. install)

elseif command == 'download' then

   if not arguments[1] then
      print(help)
      print()
      error('please provide a package name or a path to a tar/tgz')
      os.exit()
   end

   package = arguments[1]

   if package:find('%.tar$') or package:find('%.tgz$') or package:find('%.tar.gz$') then
      error('only supporting git repos for now')
      os.exit()
   end

   if paths.filep(package) or paths.dirp(package) then
      error('file ' .. package .. ' already exists locally, aborting')
      os.exit()
   end

   for _,url in ipairs(config.urls) do
      info('trying to fetch package from server: ' .. url)
      exec(git .. ' clone ' .. url .. package .. ' ' .. package)
      if paths.dirp(package) then
         found = package
         info('just found it, and saved in ' .. package)
         break
      end
   end

   if not found then
      error('could not find package ' .. package .. ' in any of the registered repos')
      os.exit()
   end

elseif command == 'build' then

   found = arguments[1] or '.'

   if not paths.filep(paths.concat(found, 'CMakeLists.txt')) then
      error('not a valid package, please specify a path to a valid package')
      os.exit()
   end

   info('building package in ' .. found)
   exec(cd .. found .. '; ' .. make)

elseif command == 'deploy' then

   found = arguments[1] or '.'

   if not paths.filep(paths.concat(found, 'CMakeLists.txt')) then
      error('not a valid package, please specify a path to a valid package')
      os.exit()
   end

   info('building package in ' .. found)
   exec(cd .. found .. '; ' .. make .. '; ' .. install)

elseif command == 'show' then

   error(command .. ' is not implemented yet')

elseif command == 'list' then

   error(command .. ' is not implemented yet')

elseif command == 'search' then

   error(command .. ' is not implemented yet')

elseif command == 'add' then

   if not arguments[1] then
      print(help)
      print()
      error('please provide at least one valid URL')
      os.exit()
   end

   info('added url(s) to user config:')

   f = io.open(configfile)
   conf = f:read('*all')
   f:close()

   for _,arg in ipairs(arguments) do
      for _,url in ipairs(config.urls) do
         if url == arg then
            bypass = true
         end
      end
      if bypass then
         infoarg('skipping ' .. arg .. ' (already exists)')
      else
         conf = conf .. 'table.insert(config.urls, "' .. arg .. '")\n'
         infoarg(arg)
      end
   end

   f = io.open(configfile,'w')
   f:write(conf)
   f:close()   

end
